initialize() {
	
	initializeSLiMModelType("nonWF");
	
	// working directory
	if (!exists("dir")) {defineConstant("dir", "/WORKING_DIR");}
	// source directory (for loading .tree files, usually for burn-in)
	if (!exists("dir_source")) {defineConstant("dir_source", "/WORKING_DIR");}

	//	setSeed(1696611580820); // force the model to use a particular seed
	
	// chromosome length
	if (!exists("L_chr")) {defineConstant("L_chr",asInteger(1e6));}
	// number of chromosomes
	if (!exists("n_chr")) {defineConstant("n_chr",10);}
	// total genome length
	if (!exists("L")) {defineConstant("L",asInteger(L_chr * n_chr));}
	// reproduction rate (lambda: Expected offspring number per reproducing individual)
	if (!exists("lambda")) {defineConstant("lambda",1.5);}
	// density-regulation factor
	if (!exists("K")) {defineConstant("K",4000);}
	// migration probability
	if (!exists("m")) {defineConstant("m",1.0);}
	// mutation probability per site per generation
	if (!exists("mut_rate")) {defineConstant("mut_rate",3*1e-7);}
	// selection loci appearance probability
	if (!exists("a")) {defineConstant("a",2*1e-5);}
	// selection intensity, this is the paramemter of an exponential distribution
	if (!exists("s")) {defineConstant("s",0.5);}
	// selection switching scale for recurrent sweeps in generations
	if (!exists("selection_switching_scale")) {defineConstant("selection_switching_scale",500);}
	// the probability of being removed once a selection-switching event happens
	if (!exists("remove_probability")) {defineConstant("remove_probability",1.0);}
	// number of focal populations, has to be an even number >=4 !
	if (!exists("FocalPopulationNumber")) {defineConstant("FocalPopulationNumber",10);}
	
	// seed used to run the model
	if (!exists("simID")) {defineConstant("simID",getSeed());}
	// number of generations between two treeseq simplification events
	if (!exists("simplificationCycle")) {defineConstant("simplificationCycle",100);}
	// number of generations between two output events
	if (!exists("outputCycle")) {defineConstant("outputCycle",50);}
	
	// initialize recombination rates
	rates=c();
	for (i in 1:(n_chr-1)){rates=c(rates,1/L_chr,0.5);}
	rates=c(rates,1/L_chr);
	
	// initialize chromosomes
	ends=c();
	for (i in 1:(n_chr-1)){ends=c(ends,(i*L_chr)-1,i*L_chr);}
	ends=c(ends,n_chr*L_chr);
	
	initializeRecombinationRate(rates,ends);
	
	// sample functional sites that are subject to recurrent selection
	bs_rates = c();
	for (i in 1:(n_chr)){bs_rates=c(bs_rates,1/L_chr*(i/n_chr)^6*1e3);}
	
	pos_selected_all = c();
	for (chr in 1:n_chr){
		
		n_selected = rbinom(1,L_chr,bs_rates[chr-1]);
		
		pos_selected = sort(sample(((chr-1)*L_chr):(L_chr*chr-1),n_selected));
		
		pos_selected_all = c(pos_selected_all,pos_selected);
	
	}
	
	l = length(pos_selected_all);
	
	//	sim.setValue("pos_selected_all",pos_selected_all);
	
	rates = c();
	ends = c();
	
	for (i in 1:l){
		
		rates = c(rates,0,mut_rate);
		ends = c(ends,pos_selected_all[i-1]-1,pos_selected_all[i-1]);
	}
	
	rates = c(rates,0);
	ends = c(ends,L);
	
	l = length(ends);
	d = ends[1:(l-1)]-ends[0:(l-2)];
	ends = ends[0:(l-2)][d != 0];
	rates = rates[0:(l-2)][d != 0];
	rates = c(rates,0);
	ends = c(ends,L);
	
	defineConstant("n_selectedSites",asInteger(ceil(length(ends)/2)));
	
	print(n_selectedSites);
	
	initializeMutationRate(rates,ends);
	
	initializeMutationType("m1", 0.5, "f", 0.0); // cyclic mutations
	initializeMutationType("m2", 0.5, "f", 0.0); // divergently selected mutation, but its selection effect will be explicitly specified in the fitness scaling step (usually in the early() events)
	m2.color = "red";
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, L-1);
	
	
	//	initializeTreeSeq;
	initializeTreeSeq(simplificationRatio=INF);
	
}

// reproduction rules (monoecious individuals)
reproduction() {
	
	for (pop in sim.subpopulations) {
		// reproduction rules for the species across populations
		if (pop.individualCount >= 1) {
			
			// return the offspring numbers
			n_offsprings = rpois(1,pop.individualCount * lambda);
			
			if (n_offsprings >= 1) {
				mate1 = pop.sampleIndividuals(n_offsprings,replace = T);
				mate2 = pop.sampleIndividuals(n_offsprings,replace = T);
				for (i in 0:(n_offsprings-1)){
					pop.addCrossed(mate1[i],mate2[i]);
				}
			}
		
		}
	}
	
	// disable this callback for this generation
	self.active = 0;
}

function (void)execute_migration(integer$ form){
	
	// form == 1 > isolated sp1 and sp2
	// form == 2 > connected sp1 and sp2
	
	if (form == 1){
		
		nfp = sim.getValue("focalpopCount");
		
		// create migration
		// index for the populations belonging to different species 0-based
		pop_index_sp1 = 2*(0:(nfp/2-1));
		pop_index_sp2 = 2*(0:(nfp/2-1))+1;
		
		// migrate the first species
		Migrants = c(); //array of every migrants
		Dests = c(); //array of destinations for each migrant
		
		for (i in pop_index_sp1) {
			//sample migrants from each population
			nIndividuals = sim.subpopulations[i].individualCount;
			nMigrants = nIndividuals >= 1 ? rbinom(1, sim.subpopulations[i].individualCount, m) else 0;
			migrants = nMigrants >= 1 ? sample(sim.subpopulations[i].individuals, nMigrants) else NULL;
			Migrants = isNULL(migrants) ? Migrants else c(Migrants,migrants);
			//sample destinations for each migrant
			if (nMigrants >= 1) {
				for (j in 1:nMigrants) {
					dest = ((i==pop_index_sp1[0]) ? sample(c(pop_index_sp1[0],pop_index_sp1[1]),1) else ((i==pop_index_sp1[size(pop_index_sp1)-1]) ? sample(c(pop_index_sp1[size(pop_index_sp1)-1],pop_index_sp1[size(pop_index_sp1)-2]),1) else sample(c(i+2,i-2),1)));
					Dests = c(Dests,dest);
				}
			}
		}
		
		if (size(Dests)>=1) {
			//print(Migrants);
			//print(Dests+1);
			for (i in 0:(size(Dests)-1)) {
				sim.subpopulations[Dests[i]].takeMigrants(Migrants[i]);
			}
		}
		
		// migrate the second species
		Migrants = c(); //array of every migrants
		Dests = c(); //array of destinations for each migrant
		
		for (i in pop_index_sp2) {
			//sample migrants from each population
			nIndividuals = sim.subpopulations[i].individualCount;
			nMigrants = nIndividuals >= 1 ? rbinom(1, sim.subpopulations[i].individualCount, m) else 0;
			migrants = nMigrants >= 1 ? sample(sim.subpopulations[i].individuals, nMigrants) else NULL;
			Migrants = isNULL(migrants) ? Migrants else c(Migrants,migrants);
			//sample destinations for each migrant
			if (nMigrants >= 1) {
				for (j in 1:nMigrants) {
					dest = ((i==pop_index_sp2[0]) ? sample(c(pop_index_sp2[0],pop_index_sp2[1]),1) else ((i==pop_index_sp2[size(pop_index_sp1)-1]) ? sample(c(pop_index_sp2[size(pop_index_sp1)-1],pop_index_sp2[size(pop_index_sp1)-2]),1) else sample(c(i+2,i-2),1)));
					Dests = c(Dests,dest);
				}
			}
		}
		
		if (size(Dests)>=1) {
			//print(Migrants);
			//print(Dests+1);
			for (i in 0:(size(Dests)-1)) {
				sim.subpopulations[Dests[i]].takeMigrants(Migrants[i]);
			}
		}
	}
	else {
		if (form == 2){
			nfp = sim.getValue("focalpopCount");
			
			// create migration
			// index for the populations belonging to different species 0-based
			pop_index_sp1 = 2*(0:(nfp/2-1));
			pop_index_sp2 = 2*(0:(nfp/2-1))+1;
			
			// migrate the first species
			Migrants = c(); //array of every migrants
			Dests = c(); //array of destinations for each migrant
			
			for (i in pop_index_sp1) {
				//sample migrants from each population
				nIndividuals = sim.subpopulations[i].individualCount;
				nMigrants = nIndividuals >= 1 ? rbinom(1, sim.subpopulations[i].individualCount, m) else 0;
				migrants = nMigrants >= 1 ? sample(sim.subpopulations[i].individuals, nMigrants) else NULL;
				Migrants = isNULL(migrants) ? Migrants else c(Migrants,migrants);
				//sample destinations for each migrant
				if (nMigrants >= 1) {
					for (j in 1:nMigrants) {
						dest = ((i==pop_index_sp1[0]) ? sample(c(pop_index_sp2[0],pop_index_sp1[1]),1) else ((i==pop_index_sp1[size(pop_index_sp1)-1]) ? sample(c(pop_index_sp1[size(pop_index_sp1)-1],pop_index_sp1[size(pop_index_sp1)-2]),1) else sample(c(i+2,i-2),1)));
						Dests = c(Dests,dest);
					}
				}
			}
			
			if (size(Dests)>=1) {
				//print(Migrants);
				//print(Dests+1);
				for (i in 0:(size(Dests)-1)) {
					sim.subpopulations[Dests[i]].takeMigrants(Migrants[i]);
				}
			}
			
			// migrate the second species
			Migrants = c(); //array of every migrants
			Dests = c(); //array of destinations for each migrant
			
			for (i in pop_index_sp2) {
				//sample migrants from each population
				nIndividuals = sim.subpopulations[i].individualCount;
				nMigrants = nIndividuals >= 1 ? rbinom(1, sim.subpopulations[i].individualCount, m) else 0;
				migrants = nMigrants >= 1 ? sample(sim.subpopulations[i].individuals, nMigrants) else NULL;
				Migrants = isNULL(migrants) ? Migrants else c(Migrants,migrants);
				//sample destinations for each migrant
				if (nMigrants >= 1) {
					for (j in 1:nMigrants) {
						dest = ((i==pop_index_sp2[0]) ? sample(c(pop_index_sp1[0],pop_index_sp2[1]),1) else ((i==pop_index_sp2[size(pop_index_sp1)-1]) ? sample(c(pop_index_sp2[size(pop_index_sp1)-1],pop_index_sp2[size(pop_index_sp1)-2]),1) else sample(c(i+2,i-2),1)));
						Dests = c(Dests,dest);
					}
				}
			}
			
			if (size(Dests)>=1) {
				//print(Migrants);
				//print(Dests+1);
				for (i in 0:(size(Dests)-1)) {
					sim.subpopulations[Dests[i]].takeMigrants(Migrants[i]);
				}
			}
		}
	}

}

function (void)calculate_fitness(void){
	
	nfp = sim.getValue("focalpopCount");
	gen = sim.generation;
	sign = 1; //floor(gen/selection_cycle)%2 == 0 ? 1 else -1;
	

	
	// =========calculate fitness among children for selected loci
	
	for (i in 1:nfp) {
		pop = sim.subpopulations[i-1];
		children = pop.individuals;
		// density-dependent viability selection
		densityS = pop.individualCount/K;
		
		for (child in children) {
			n_adaptives = sum(child.genomes.countOfMutationsOfType(m1));
			child.fitnessScaling = (0.8+0.2*(1-exp(-n_adaptives * s)))*exp(-densityS);
		}
	
	}



}


// create the population
1 early() {
	
	// add focal species
	sim.setValue("focalpopCount", FocalPopulationNumber);
	
	nfp = sim.getValue("focalpopCount");
	for (i in 1:1) {
		sim.addSubpop(i,asInteger(log(lambda)*K));
	}
	for (i in 2:nfp) {
		sim.addSubpop(i,0);
	}
	sim.addSubpop(nfp+1,0);//garbage collector
	
	//	sim.readFromPopulationFile(dir_source + "/" + treeSeqFileName); //use a pre-eixsting population profile
	
	//	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
	
	//	logcontent = paste(asString(S));
	//	writeFile(dir + "/slim_seed" + simID + "_modelspec.txt", "Selection coefficients:",append=T);
	//	writeFile(dir + "/slim_seed" + simID + "_modelspec.txt", logcontent,append=T);
}

2: early() {
	
	nfp = sim.getValue("focalpopCount");
	
	for (i in 1:nfp){
		sim.subpopulations[nfp].takeMigrants(sim.subpopulations[i-1].subsetIndividuals(minAge=1));
	}
	
	muts = sim.mutationsOfType(m1);
	if (length(muts)>0){
		switch = sample(c(0,1),1,weights=c(1-1/selection_switching_scale,1/selection_switching_scale));
		if (switch == 1){
			do {num_muts_to_remove = rbinom(1,length(muts),remove_probability);}
			while (num_muts_to_remove == 0);
			mut_removed = sample(muts,num_muts_to_remove);
			
			for (mut in mut_removed) {mut.setMutationType(m2);}
			//			sim.subpopulations.genomes.removeMutations(mut_removed);
			print(length(mut_removed)+" mutations are removed");
		}
	}
	
	
	calculate_fitness();
	
	// set the fitness of individuals from the last generation to 0
	sim.subpopulations[nfp].individuals.fitnessScaling = 0.0;

}

2:40000 late() {
	
	//	execute_migration(1);
	
	// determine whether to output the treesqeuence
	if (sim.generation/simplificationCycle == ceil(sim.generation/simplificationCycle)) {
				print("Current generation: "+asString(sim.generation));

		sim.treeSeqSimplify();
	}

}

40001 late() {
	
	// select half of p1's individuals to move to p2
	p2.takeMigrants(sample(p1.individuals,asInteger(ceil(length(p1.individuals)/2))));
	
	execute_migration(1);
	
	//	execute_mutation_deleterious();
	
	// determine whether to simplify the treesqeuence
	if (sim.generation/simplificationCycle == ceil(sim.generation/simplificationCycle)) {
				print("Current generation: "+asString(sim.generation));
		//      print("sp1-contact zone N: "+asString(sim.subpopulations[0].individualCount));
		//      print("sp2-contact zone N: "+asString(sim.subpopulations[1].individualCount));
		//      print("sp1-peripheral N: "+asString(sim.subpopulations[FocalPopulationNumber-2].individualCount));
		//      print("sp2-peripheral N: "+asString(sim.subpopulations[FocalPopulationNumber-1].individualCount));
		sim.treeSeqSimplify();
	}
	
	//	if (sim.generation/outputCycle == ceil(sim.generation/outputCycle)) {
	//		sim.treeSeqOutput(dir + "/slim_seed" + simID + "_gen" + sim.generation + ".trees");
	//	}
}

40002:140000 late() {
	
	execute_migration(1);
	
	// determine whether to simplify the treesqeuence
	if (sim.generation/simplificationCycle == ceil(sim.generation/simplificationCycle)) {
				print("Current generation: "+asString(sim.generation));
		sim.treeSeqSimplify();
	}
	

}

140000 late () {
    sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);
    sim.treeSeqOutput(dir + "/slim_seed" + simID + "_gen" + sim.generation + ".trees");
}

140001: late() {
	
	execute_migration(2);
	
	// determine whether to simplify the treesqeuence
	if (sim.generation/simplificationCycle == ceil(sim.generation/simplificationCycle)) {
				print("Current generation: "+asString(sim.generation));
		sim.treeSeqSimplify();
	}
	
	if (any(sim.generation == (140000 + c(5,10,50,100,500,1000,2000,3000,4000,5000)))) {
		sim.treeSeqOutput(dir + "/slim_seed" + simID + "_gen" + sim.generation + ".trees");
	}
}

145001 late() {

}